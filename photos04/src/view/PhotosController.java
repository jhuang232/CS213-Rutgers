package view;

import java.io.IOException;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.stage.Stage;
/**
 * This class acts as listener for all events fired from the Photo/album buttons.
 * It keeps track of the current state instance of the Photos model.
 * When an event is handled by the controller, it delegates event processing
 * to the current state instance, which processes the event and returns the next
 * state.
 * <p>When the Photos starts up, it is set to the login state.
 * 
 * <p>Modified design of CalculatorController develeoped by Sesh Venogupal
 * 
 * @author Jeffrey Tang and Jason Huang
 */

public class PhotosController {
    //list all possible states

    /**
     * The login state.
     */
    protected PhotoLoginState photoLoginState;

    /**
     * The admin state.
     */
    protected PhotoAdminState photoAdminState;

    /**
     * albums home page
     */
    protected PhotoUserState photoUserState;
    
    /**
     * album page
     */
    protected PhotoAlbumState photoAlbumState;
    /**
     * photo page
     */ 
    protected PhotoPhotoState photoPhotoState;
    /**
     * Current state instance
     */
    protected PhotoState currentState;

    /**
     * Current FXML Stage
     */
    protected Stage currentStage = new Stage(); 

    /**
     * FXML Controller for Login screen
     */
    @FXML
    protected LoginController loginController;

    /**
     * FXML Controller for Admin screen
     */
    @FXML
    protected AdminController adminController;

    /**
     * FXMl Controller for User screen
     */
    @FXML
    protected UserController userController;

    /**
     * FXML Controller for Search window
     */
    @FXML
    protected SearchController searchController;

    /**
     * FXML Controller for Album screen
     */
    @FXML
    protected AlbumController albumController;

    /**
     * FXML Controller for Album Destination window
     */
    @FXML
    protected AlbumDestinationController albumDestinationController;

    /**
     * FXML Controller for Photo screen
     */
    @FXML
    protected PhotoController photoController;

    /**
     * FXML Controller for Manage Tag screen
     */
    @FXML
    protected TagController tagController;

    /**
     * Starts up the state machine in login state.
     */
    public void start() {
        //set up the view controllers, set up one for each interactible button
        loginController.setPhotosController(this);
        adminController.setPhotosController(this);
        userController.setPhotosController(this);
        searchController.setPhotosController(this);
        albumController.setPhotosController(this);
        albumDestinationController.setPhotosController(this);
        photoController.setPhotosController(this);
        tagController.setPhotosController(this);

        //set itself as controller for all state machine
        PhotoState.photosController = this;

        //make the states, the number of screens 
        photoLoginState = PhotoLoginState.getInstance();
        photoAdminState = PhotoAdminState.getInstance();
        photoUserState = PhotoUserState.getInstance();
        photoAlbumState = PhotoAlbumState.getInstance();
        photoPhotoState = PhotoPhotoState.getInstance();
        
        //get the machine up and running
        currentState = photoLoginState;
        currentState.enter();

        //sets up force quit since out quit is generated by the Stage
        //need to modify so that it serializes or send a method call to wherever we are serializing
        //need refrence to user in which ever state it is in
        currentStage.setOnCloseRequest(event -> {
            try {
                if(photoUserState.currentUser != null){
                    //dosen't really work since overwrites everything for current user
                    PhotoUserState.writeState(photoUserState, photoUserState.currentUser);
                }
            } catch (IOException e){
                e.printStackTrace();
            }
        });
    }

    /**
     * Process event fired from any of the buttons
     * 
     * @param e The action event that is to be passed on for handling.
     */
    public void processEvent(ActionEvent e) {
        PhotoState.lastEvent = e; 
        currentState = currentState.processEvent();
    }

}
